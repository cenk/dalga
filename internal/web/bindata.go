// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package web generated by go-bindata.// sources:
// public/index.html
// +build !dev

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x7f\x73\xdb\xb6\x92\xff\xe7\x53\xec\x63\x6f\x1a\xa9\x31\x45\x49\xb6\x93\x54\xb6\x34\x2f\xb1\xd3\x36\x89\x5b\xfb\x1a\xb7\xaf\x4d\xa7\xf3\x1e\x44\xae\x48\xd8\x20\xc0\x00\xa0\x7e\x34\xe3\x99\xfb\x10\xf7\x09\xef\x93\xdc\x00\xfc\x21\x92\xa2\x64\x3b\xf1\xbd\x77\xd7\x39\xfe\x61\x83\xc0\x62\x7f\x61\xb1\xbb\x00\x57\xc7\x7f\x39\x3d\x3f\xb9\xfc\xf5\xe2\x15\x44\x3a\x66\x93\x47\xc7\xe6\x1f\x30\xc2\xc3\xb1\x83\xdc\x31\x1d\x48\x82\xc9\xa3\x47\x00\xc7\x31\x6a\x02\x7e\x44\xa4\x42\x3d\x76\x52\x3d\x73\x9f\x3b\xe0\x4d\xca\xa1\x48\xeb\xc4\xc5\x0f\x29\x9d\x8f\x9d\x5f\xdc\x9f\x5e\xb8\x27\x22\x4e\x88\xa6\x53\x86\x0e\xf8\x82\x6b\xe4\x7a\xec\xbc\x7e\x35\xc6\x20\xc4\x3d\x3f\x92\x22\xc6\xf1\xa0\x86\xa2\x84\x5a\xd0\x40\x47\xe3\x00\xe7\xd4\x47\xd7\xbe\xec\x01\xe5\x54\x53\xc2\x5c\xe5\x13\x86\xe3\x41\xaf\xbf\x07\x31\x59\xd2\x38\x8d\xab\x5d\xa9\x42\x69\xdf\xc9\x94\xe1\xb8\xef\x00\x27\x31\x8e\x9d\x39\xc5\x45\x22\xa4\xae\x91\x6b\x0e\xed\x20\x6f\xe7\x99\x89\x8c\xf2\x6b\x90\xc8\xc6\x0e\xf5\x05\x77\x20\x92\x38\x1b\x3b\x09\xd1\x91\xa7\x85\x37\x23\xf3\x5e\xc2\x43\xc7\xd2\xd0\x54\x33\x9c\x9c\x12\x16\x12\x38\x25\x2a\x9a\x0a\x22\x83\x63\x2f\xeb\x5e\x23\xcb\x30\x18\xed\xa9\x91\xe7\xf9\x01\xef\x5d\xa9\x00\x19\x9d\xcb\x1e\x47\xed\xf1\x24\xf6\x22\xc2\x66\xb1\x10\xfc\xaf\x83\xde\xa0\xd7\xf7\x7c\xa5\xca\x2e\x77\x4e\x24\x35\xb2\xaa\x5e\x4c\x79\xcf\x57\xca\xc9\xd8\x53\x7a\xc5\x50\x45\x88\xa5\xcc\x6b\xd6\xab\x63\x1b\xe4\xaf\x54\xcf\x67\x22\x0d\x66\x8c\x48\xec\xf9\x22\xf6\xc8\x15\x59\x7a\x8c\x4e\x95\x37\x13\x5c\xbb\x64\x81\x4a\xc4\xe8\x1d\xf4\x9e\xe5\xcc\x54\xbb\xd7\x6c\x50\xae\x31\x94\x54\xaf\xc6\x8e\x8a\xc8\xf0\xf0\xa9\x8b\xef\xa5\x7c\xe3\x2f\x4e\x7d\x6f\x3f\x3d\x8d\x54\xa0\x9f\x0e\xd4\xd9\x50\x9c\xbf\xfc\x75\xff\xe9\xf0\xc3\xf7\xfb\x4c\xf0\x41\xb8\x7a\xb5\xbc\x3e\xeb\x8f\x1d\xf0\xa5\x50\x4a\x48\x1a\x52\x3e\x76\x08\x17\x7c\x15\x8b\x54\x39\xf7\x91\x65\x53\x95\x33\x46\x74\x42\xfd\x6b\xe9\x05\x54\xe9\xf5\x6b\xc9\x76\xb6\x32\x16\xab\xa1\x04\x30\x92\x42\x68\xf8\x68\xdb\x00\xae\x9b\x48\x1a\x13\xb9\x72\x7d\xc1\x84\x1c\xc1\x9c\xc8\x8e\xeb\xae\x90\x31\xb1\xc8\xfa\xba\x47\x70\x97\xc7\xfb\x0a\x5e\xe2\x4c\x48\x2c\x70\x4c\x59\x8a\x39\x06\xf8\xca\x6b\xa7\xe7\x32\x1a\x46\xba\x8d\x6a\x36\xb2\x83\xf6\x0e\x7a\xf9\xdc\xed\x54\xe7\x28\x57\x3b\x48\xaf\x87\x37\xe8\xef\xa2\x5a\x99\xb6\x9d\x74\x40\xe4\x75\x2b\x51\x33\xb0\x53\xd5\xbb\x48\xdb\xc9\xb7\xc8\xbb\x95\x72\x39\xda\x42\xfe\x56\x79\xb7\x52\x9e\x8a\xa5\xab\x22\x12\x14\x64\x1a\xa4\x9b\xc3\x77\xd4\xf4\xc6\xb4\xbb\x90\xb6\x4c\xe2\x6d\x1c\xe4\x50\xdd\xa3\x3b\x92\x2e\xe0\xab\x1c\x68\x5c\xea\x7c\x54\xf0\xc6\x22\x4c\xc3\x02\x5d\x1d\xaa\xb6\x16\xd3\xd0\x2a\x62\x83\x83\xfa\x94\xca\x22\x4c\xc3\x92\x81\x1b\xb3\xd3\xbd\x7c\xab\x3f\x3a\xf6\xb2\x58\x77\x3c\x15\xc1\x0a\x7c\x46\x94\x32\x91\x40\x47\xae\x9f\x2a\x2d\x62\x77\x81\xd3\x6b\xaa\x5d\xe5\x4b\xc1\xd8\x94\x48\x05\xd5\x51\x5f\xa9\xca\x90\x03\x01\xd1\xc4\x0d\x62\x57\x45\x42\x6a\x3f\xd5\x2e\x72\xe3\xa6\x83\xb1\xa3\x65\x8a\xf9\xb8\x42\xed\x26\x12\x67\x28\x25\x06\x6e\x2c\x02\x74\x05\x67\x82\x94\x50\x4b\xd7\xc0\x8d\x1d\xc2\x12\xca\xf1\x44\x70\x6d\x28\xa0\xec\x74\xcd\x98\x09\x89\x63\xc7\xfc\xed\x74\x73\xc7\x15\xd0\x79\xc1\x7b\x2c\x02\xc2\x1c\xa0\x41\xde\x74\x07\x0e\x68\x32\xa5\x3c\xc0\xe5\xd8\x31\x6f\x52\x30\x1c\x3b\x01\x25\x4c\x64\x31\xab\x05\x81\x9b\x0f\x17\xc0\xc2\x4f\x63\xe4\x3a\x07\x6f\x9b\x90\x87\xd1\x12\x02\xe0\x98\xe4\xae\xf9\x0b\xa7\x00\xf5\x99\x50\x58\x20\x9d\xa6\x5a\x9b\x60\x6a\x42\x99\xcb\xc8\xd4\xf8\xf5\x13\x0b\xb0\xc6\x61\x9c\x72\x42\x78\x06\x13\xd1\x20\x40\x9e\x2b\x69\xf2\xa5\xa6\x31\xaa\xa3\x63\xcf\x00\x54\xa8\x7a\xa4\xf2\x12\x1d\xd6\xb9\xb4\x61\xd8\x99\x9c\x48\x24\x1a\x81\xc0\x0f\xb8\x80\x37\x62\x7a\xec\x45\x87\x95\x59\x33\x21\x63\x20\xbe\xa6\x82\x8f\x1d\xcf\x81\x18\x75\x24\x82\xb1\x73\xf1\xd3\x65\x29\xca\xc2\x3d\xe8\xf7\x21\x5e\xb8\xb3\x94\x31\x07\x04\x57\xe9\x34\x36\x0b\x93\x26\x01\xd1\xf8\xc2\xce\xae\x4b\x52\xd1\x99\xa1\xe0\x86\x52\xa4\x49\x0d\xc4\xc4\x38\xa3\x08\x98\x09\x39\x76\x38\x2e\x5c\x93\x63\x94\x34\xa5\x49\xb4\x24\x06\xce\xe4\x82\xe8\xe8\xd8\xb3\xb0\x8d\xf9\x94\x27\xa9\x06\xbd\x4a\x70\xec\x98\xed\xe0\xd4\x48\xfa\x99\x2d\x65\xf6\xb1\xc6\x9f\x30\xe2\x63\x24\x58\x80\x72\xec\x04\xa8\x34\xe5\xc4\xf0\x9f\x0f\x17\x74\xab\x1c\x54\x05\xf3\x02\x3a\xff\x6c\x49\xcd\x06\x6c\x91\xf4\xa5\x08\x56\x0f\x22\x69\x86\xbf\x26\x69\x8c\x4a\x91\x10\xff\x9e\x0d\x7d\xb6\x94\x52\x2c\x40\x8a\x85\x8b\x1f\x5c\x95\x10\x9f\xf2\xb0\x29\x72\x65\x86\x2f\x58\x63\x74\x53\x25\x33\x2a\x95\x96\x29\x6f\x51\xcb\x37\x66\x08\x7e\x4c\x79\xab\x6e\xee\xaf\x9d\x35\xa9\x9a\x86\x86\xfd\xfe\x33\xb7\xbf\xef\xf6\x07\x97\x83\xfd\x51\xbf\x3f\xea\xf7\xdf\x37\x85\x6a\xea\xe5\xfe\x72\x9a\x9c\x51\xce\x8d\xdb\xda\x90\xf3\x75\x3e\xf4\x40\x62\xae\x29\xd5\xc4\x1c\x44\x87\xf1\x6d\x62\xfd\x33\xd6\xbf\x3a\x9e\x07\x98\x08\xfd\xeb\xa9\x58\x6e\xc0\x36\x64\x2f\xe1\xac\xa8\xc5\x9b\x71\xf7\x73\xc2\x52\x1c\x3b\x6d\x08\x2a\xcb\x50\x99\x31\x79\x1d\xc7\x18\x50\xa2\x71\x9b\xd2\x5b\x56\xfc\x13\x8c\xe0\xc1\x85\x1d\xde\x5b\xd8\xa1\x33\x39\xe7\xe8\x9e\xcf\x66\x9f\x21\xea\xc3\xb8\x3f\x26\x7c\x92\x85\x8c\xb3\xbc\xf5\x20\x5e\xaf\x44\x5b\x37\xf8\x33\xa1\xe0\x05\x0f\x91\xa1\xda\xe5\xe4\x8e\x3d\x83\xb5\xf2\x5e\x91\xcc\xe6\x5a\xd2\xe4\xf1\x10\x6b\x77\xd8\xaf\xe3\xd9\x8c\xfd\x53\xcd\x21\x96\xee\x61\x23\xfc\x4f\x4e\x08\xf7\x91\xd5\xc2\xf6\xd6\xf9\x53\x5d\xa6\x8b\x1b\x68\x6c\x48\xaf\x47\xff\xaa\x30\x95\x97\xb2\x99\x35\xe0\xf8\x2f\xae\x0b\x9e\x4d\x10\xc0\x75\x37\x32\xaa\x84\x84\xe8\x2e\x24\x49\x12\x94\x59\xf2\xc7\xc9\x7c\x4a\x64\x96\x7b\xd5\x61\x95\xa6\xfe\xf5\xca\x25\x0c\xa5\x56\xce\x24\xa7\x94\x81\x71\x52\x82\x95\x08\xb6\x4a\x9b\x41\xb8\x53\x49\x78\x35\x0c\xd9\x7b\x85\x52\xa2\x52\xd6\x2c\x49\xaa\x4f\x35\xeb\x03\x76\x91\x62\xc1\x85\x71\x48\xe8\x4c\xe6\xfb\xbd\x7e\x9e\x31\x65\x62\xd7\x01\x60\x0c\xf6\x54\x3f\x23\x31\x65\x2b\x50\x11\x9d\x69\x0c\x40\x0b\x58\x83\x18\x0d\xb5\xd9\x43\xcc\x5c\x92\x6a\xb1\xc5\x0c\xca\x5c\xf4\x6e\xab\xd9\xd8\x86\x79\x9a\x56\x33\xd4\x6d\x0b\xbd\xc1\xd5\xa0\x61\x9a\x19\x8d\x26\x23\xea\x43\x4a\x24\x3a\xf9\xce\x2a\x72\x53\xc1\x7d\x46\xfd\xeb\xb1\x53\xdc\xbc\xf4\xb4\x08\x43\x86\xa7\x44\x5e\x7f\x2f\x02\xb4\x19\x78\x9d\xd7\x63\x5a\xee\x48\x02\x33\xe2\xda\xfb\x1a\xe1\xb4\xa5\xb0\xc7\x1e\xdd\x98\x5d\x5d\x49\x65\x8e\x31\x6c\xe5\x4c\x2e\x2d\x51\x30\x47\x29\x30\xe7\x85\x66\xd2\x6b\x54\x90\xb1\xdc\xaa\x94\x63\x8f\x93\x79\x8b\xb5\xe6\x39\x7b\x61\xdc\xad\xd9\xfd\x36\x98\x4d\x28\x42\x39\x4a\x77\xc6\x52\x1a\x6c\xcd\x7b\x37\x4f\x09\x16\x22\x1a\x34\xc9\xd9\x44\x3d\x33\x46\x45\xff\x40\x77\x38\x74\x72\x8b\xad\xf6\x15\xf6\x6a\x5e\x47\x30\xec\x0d\x25\xc6\xd0\x19\x0e\x93\x65\xb7\x66\xa7\xd9\xf3\x9a\x2b\x6d\x9c\x0d\x0c\x86\xfb\x07\x87\x0d\xa7\x1e\x0d\xea\xe0\x97\x11\x4a\x04\x22\x11\xf6\x41\x0b\x4d\x18\xd0\x7c\xba\xea\xdd\xd5\xf9\xdf\x37\x21\x70\x9f\x82\xf9\xbb\x64\xee\xfe\xee\x70\x49\x64\xd0\x16\xe2\xa2\x61\x15\xa2\x38\xec\x6c\xc0\x01\x5c\x5a\x81\xde\x88\xa9\x6a\x19\xac\x99\xe0\x5a\xdb\x83\xa7\xb9\xb3\x48\xb5\x49\xcc\x3a\x27\xa9\x94\xc8\x35\xac\x90\xc8\xee\xa6\x41\x96\x7a\x1d\xb6\xf4\x1a\x9d\x1d\xfb\x84\xcf\x89\x82\x08\x4d\x0c\xb1\xa9\xa6\xd9\x11\x59\xef\xa4\x25\xf0\x7e\x62\xe2\xf1\x4f\x53\xea\x8f\x29\xe7\x94\x87\x7f\x5a\xb5\x9a\xcd\x77\x3e\x47\x39\x63\x62\x01\xc2\xf7\x53\x69\xa8\x48\x04\xc1\x81\x11\x19\x22\x28\x5f\x22\x72\x05\x1d\xc2\x03\x08\xc4\x82\x6f\xee\x42\x8b\xc5\xee\xad\x99\x90\xb8\x07\x04\xe6\x76\x6f\xa0\x04\xaa\x80\x04\x01\x06\x40\x34\xe8\x88\x2a\x48\x04\xe5\x7a\x13\x43\x65\xcd\xca\xb9\x81\x59\x5f\x2e\x38\x16\x31\x37\x23\x54\x76\xc3\x18\x02\xaa\x12\x46\x56\x23\xb0\xef\xc6\xaf\x1a\xc6\x71\xa9\x25\x69\xb2\x3f\x81\xc1\xb0\xdf\x6f\x73\x22\xff\x2a\xdb\xba\x40\x1e\xfc\x99\x6d\xeb\x5f\xa4\xd6\x33\x12\xfe\xe9\xb4\x79\xcf\x88\xe4\xb2\xdb\x82\x12\x0b\xdd\x83\xcd\x65\xa8\xe8\xb8\x1a\xb2\x9d\xc9\x1b\x31\x85\x33\x21\xae\xd3\xa4\x4d\xf6\xe3\xfa\x81\xa2\x8d\xe6\xdd\xce\xd2\xad\xbc\xb6\xc2\xd4\xcf\x5a\xf7\xbd\x50\x2b\x71\xdc\xe3\xe0\xf5\x10\x97\x6a\x5b\x97\xf3\xd3\x45\xbf\xef\x0d\xdb\xa7\x88\xfe\xb9\xb7\x6c\xb7\x88\xbd\xad\xbb\x3d\xa7\x2f\x0f\x17\x19\xeb\xd9\x0d\xad\x39\x60\x67\xd6\xd9\xcc\x98\x0b\x12\x9b\x26\x7a\x07\x97\xc5\x42\xf7\xf9\x27\x39\xab\x5b\xb3\xe3\x1c\xae\xea\x94\xa6\x24\x08\x11\xec\x5f\x37\xa1\x8c\xe5\x4d\x95\xfa\x3e\x2a\x05\x33\x26\x48\x7e\x36\x77\x26\x79\x5a\xb2\xcd\x41\xdd\x0d\x73\x40\x78\x88\xb2\x8e\xd8\xe4\x02\x41\xda\x72\x16\x29\x11\x6f\xf5\x11\xad\x66\x66\x1c\xc7\x29\x6a\x42\x59\x6b\x88\x6b\x77\xa4\x5b\xec\xe1\xae\x4a\xbd\xe3\x11\xa6\x7d\xc6\x1d\x7d\xd4\x26\xa1\x6d\x9b\xd5\x42\x2a\x2d\x05\x0f\xb7\x28\x2e\x73\x53\x19\xc8\x0e\x1c\x35\x6a\x01\x3a\x13\x6f\x11\x11\xbd\xd5\x95\xec\xd0\xe4\xc3\xb2\x9f\xb9\x9a\xfb\xb3\xff\xd1\x21\xce\x08\x9c\xa9\x73\xf3\xa9\x32\x6c\x77\xa3\xf7\x73\x34\xff\xcb\x0d\x2b\xcb\x50\x7c\xe4\xba\x76\x54\xdf\x98\xb5\x73\x95\xd6\x77\xee\xf7\x59\xa9\xa9\x90\x01\x4a\x90\x22\xe5\xc1\x16\xa7\x5e\x3c\xef\x74\x3a\x9b\x6d\x47\xfa\x50\x66\xfa\x20\xca\x78\xe7\x47\x18\xa4\x0c\x03\xf8\x46\xc8\xff\xd7\x08\x3a\x93\x1f\x70\xa9\xe1\xd5\x12\xfd\x34\xbb\xa5\xfe\x3f\xa5\x92\x07\xf1\x03\x9f\x9d\x86\x9b\x5c\x00\x6a\x5f\x90\x21\x76\xfb\x3b\x93\xec\xf2\x20\x03\xf1\xd4\xed\x57\x6f\xc1\x36\x93\x73\xf3\xbc\x23\x0c\xff\x67\x8f\x8a\xad\xe9\x7d\x52\x5e\xbc\x6a\xb7\x5f\x41\x09\x55\x52\xad\x0c\xbf\x21\x3c\x25\x72\x05\xc3\xfe\xb0\x0f\xff\xf5\x1f\xff\x09\x17\x12\x15\x72\x7d\x9b\x0c\x96\x46\x91\xe9\x4d\xbe\xda\xc6\x6b\xb2\xd1\x95\x1f\xbf\x4c\xd6\x1a\x60\x2c\x5c\x3f\x22\x52\x3b\x90\x95\x01\x3a\x07\xcf\x0e\x9c\xf2\x68\x36\x78\xf6\xcc\x01\x5b\x32\x32\x76\xca\x7b\x84\x29\x13\xfe\xf5\x51\x06\x3f\x82\x83\x67\x07\xc9\xf2\x28\x9f\x31\x82\xc1\xb3\x67\xc9\xf2\x68\x5d\xf8\x60\x70\x5f\x29\x57\x22\x0f\x50\xba\xb1\xe0\x54\x0b\x59\x39\xee\xed\x48\x1c\x03\x77\xc6\x70\x09\xb1\x76\x07\x7d\x20\x8c\x86\xdc\xa5\x1a\x63\xb5\x6b\x1f\x6f\x5b\xe5\x61\x6d\x95\xb7\x6d\x9f\x7b\xab\xb7\x78\x2e\x23\xb4\x25\x2e\x40\x15\x64\x75\x10\x01\x50\x0e\x12\x6d\xe9\x45\x8c\xad\xfb\x6e\x6b\xfa\xb8\x33\xa9\x87\xe2\x7b\x43\xfd\xc6\x7e\xab\x4c\x8d\x5b\xf9\x19\x65\x98\x95\x0b\x89\xfc\xab\xd4\xdd\xee\xe7\x8b\xe7\x5b\xd4\x20\x31\x11\xb2\xd5\x3e\xb7\x1e\x2d\x76\x3b\x89\xdd\x1f\xac\xf2\xef\x54\x8d\x0b\xf9\xf2\x8b\x55\x15\xa6\xf6\xc9\xaa\x00\x50\xbe\xa4\x89\x06\x25\xfd\xfb\x15\x9e\x5e\xad\xeb\x4e\x6d\xbd\xe4\x95\xfd\xb0\x95\x61\x9b\xec\x40\xbc\xab\xa4\xf4\xc4\xec\x87\xde\x95\xf2\x86\xbd\xaf\x7b\xfb\xf9\x6b\x8e\xbc\x51\x42\x7a\x38\x18\xba\xea\xc9\x32\xdc\x7f\x7a\x35\x7d\x9d\x5e\xbd\x1c\xbe\x1b\xfe\xfc\x76\x96\x7c\x1b\xb3\x93\xfd\xcb\xc3\x9f\x87\x97\xdf\xec\xb3\x5f\x0f\x9e\x9f\xfe\xf2\x2c\x1d\xca\xaf\x7f\xf9\xe3\xdb\x3f\xc2\x0b\x45\x9e\x2e\x2e\x93\xf3\x7f\x7f\xf1\xec\xcd\xd7\x74\x36\x9b\x07\xf8\xf2\x87\xfe\x87\xaf\xf5\xdb\x3f\x7e\x5c\xfe\xbc\x5c\x0c\xde\xcc\xe9\xfb\x8b\x70\xbc\xa3\xdc\xf4\x73\x05\x8c\x68\x18\xd9\x22\x47\x23\xe4\xa0\xdf\x1b\xf6\xfa\x95\xbe\xed\x92\x5e\x9e\xbe\x7d\x2b\x9f\xbc\x9e\x8b\x0f\xef\xf9\xc5\x1f\xfe\x3e\xdb\x3f\x8c\x82\xab\xe4\xbb\xd3\x7e\xfc\x64\x3a\x7c\x75\x32\x7c\x27\xcf\x5e\x85\x6f\x4f\x7f\xfc\x5b\xb2\x9c\x0d\xe5\x37\x27\x4b\x8c\xaf\xc3\xf9\x9b\xc3\xeb\xd9\x4f\x07\xcf\x69\xf2\xe4\xd7\x27\xf1\xf0\x97\x9f\xdf\xae\xce\x4f\x4e\x9f\x1f\xae\xa6\x9a\xbd\x3f\x8d\x17\x9f\x2b\xe9\x8e\x8a\xda\x4f\x41\x10\x46\x5e\x56\xda\x76\xa5\xf2\xc6\x5f\xe7\x43\x5b\x57\x6c\xcb\x73\xb3\xae\x52\x49\x01\xce\x50\x56\xa8\x54\xc8\xac\xaf\x24\xbc\x2b\x32\x27\x59\x6f\xf1\x5d\x16\x60\x96\x72\x5b\x86\x05\x9b\x85\x74\x65\x69\x2f\x80\x44\x9d\x4a\x5e\xe9\x00\x50\x9a\x68\x4a\x47\xf0\xdb\xef\x7b\x95\xde\xac\xe4\x0e\x3e\xda\xdb\xe9\x5e\xe6\xdf\xde\x69\xa2\x53\xd5\x39\xec\xf7\xbb\x9d\x2e\xdc\x54\xc1\x6b\x00\x01\x32\xb2\xea\xd6\x88\x94\x94\x0b\x36\x3b\xcd\x71\x80\x19\x6a\x3f\xea\x3c\xf6\x94\xc5\xf2\xb8\xbb\xe1\x6c\x7a\x3a\x42\xde\x91\xa8\x12\xc1\x15\xc2\x78\x02\x45\xbb\x77\xa5\x0c\xca\x6d\x53\xac\x9b\x1e\x4f\x32\x59\x32\x79\x7b\x49\xaa\x22\x3b\xd0\x36\xcb\x27\x86\x15\x94\x52\x48\x33\xcf\x17\x5c\x09\x86\x3d\xdb\xd1\x79\xfc\xca\xfc\x1b\x3d\xde\x03\xfb\xde\x36\x7f\x46\x39\x61\x6c\xd5\xe9\x74\xcd\x74\x85\xfa\x92\xc6\x28\x52\xdd\xd9\xd0\xe6\x1e\x7c\x4f\x74\xd4\x8b\xc9\x32\x53\xdb\x57\x83\xde\xe1\x1e\x1c\xf6\xfb\xfd\x6e\xb7\x7b\x54\xc3\x7c\x53\x79\xbb\xa9\xaf\x55\xf6\xb1\xce\xae\x57\xae\xe7\x5c\x4a\x86\x3c\xd4\x11\x7c\xf9\x65\xde\xf1\x5b\xff\xf7\x5e\x01\xfe\x77\x1a\x54\xf1\x14\xe8\x6f\x4a\x8b\x2a\xcc\xbe\xe3\x7c\x51\x2b\x9b\xda\xab\x2c\x5d\x56\xf3\x69\xc4\x1b\x81\x09\x24\x6b\x7c\x31\xe5\xa7\x44\xe3\x08\x1e\x6b\x11\x90\xd5\xe3\xf5\x88\x91\xfe\x1b\x21\x63\xa2\x47\xf0\xf8\x7d\x39\x70\xd3\x3d\x2a\x48\x17\x35\x98\x3d\x12\x04\xaf\xe6\xc8\xf5\x19\x55\x1a\x39\xca\x8e\x73\x7a\xfe\xfd\x49\x16\x15\xce\x04\x31\x79\xf5\x5e\xbb\x4d\x45\xec\x4a\xf5\x8c\x15\x7f\x57\x78\x22\xca\xc3\x73\x6e\x26\x75\x4a\xc5\xde\x74\x37\xb6\x4f\xb5\xa4\xb1\x86\x90\xa1\x06\x8e\x8b\x0b\xa2\x23\x18\xaf\x39\x0c\x51\xbf\x62\x68\x9a\x2f\x57\xaf\x83\xce\xe3\x2f\x8a\x4a\xc3\xc7\xdd\x9e\xad\xd0\x39\x6a\x62\x78\x29\x82\xd5\xad\x18\xa6\x22\x58\xb5\x63\xc8\x6a\x35\x61\x0c\xff\xf0\xae\xc4\x54\x79\xff\xf6\x31\xe7\xea\x26\x6b\x1a\xf4\x37\xff\x58\xcf\xd9\x4e\xc7\xb7\x65\x24\x66\x25\x1e\x77\x7b\x25\xda\xac\x71\xd4\x74\x19\x66\x71\x8f\x9a\x26\xe2\x79\xf0\xa3\x1d\x56\xa0\x23\x04\x91\x98\xa9\x0a\x66\x42\x82\x45\x4e\x79\x08\xd9\x4f\x6a\x34\x34\x15\x1d\xa2\xb6\xa1\xf0\x3c\x9b\xd4\x99\x86\x27\x82\x09\xb9\x07\xd9\xb9\xe9\x24\xab\xe5\xae\x3a\x89\x16\xe7\x65\x1e\xe3\x18\x47\xe0\x30\xca\xd1\xd9\x6b\x8c\x99\x0d\x3e\xda\x98\x61\x55\x49\xa6\xc8\xd4\x08\x7e\x73\xec\xa7\x37\x77\xe0\xec\x41\xde\x1c\xae\x9b\xfb\xeb\xe6\xc1\xba\x79\xe8\xfc\xde\x24\x54\x10\x53\xa8\x0d\xd2\x36\x8a\x25\xd5\x11\x38\xf6\xc4\xb2\xc1\x6d\x9d\xeb\xdf\x06\xfd\x3d\x78\xbe\x07\x83\xaf\xf7\x60\x70\xb0\x07\xc3\xc3\x56\xaa\xe6\x99\x12\xff\x3a\xb4\x07\xcd\x93\xac\xb0\xbe\x50\xe6\x36\xf8\xb5\x8a\x47\xd5\x97\xdd\xf0\x7f\xcb\xb2\xff\x61\x0b\xd0\xcd\xef\x8d\xce\x9b\x26\xaa\xdc\x36\xda\x17\xc3\xfe\xbc\x69\xcb\x98\x79\x56\x2f\x96\xb8\x4b\xad\xe6\xd1\xd4\xbf\xde\x81\xa2\x14\x05\x43\xca\x5f\xe8\xf7\x28\x45\xd3\x63\xb5\x3f\xe5\x19\x68\x46\x98\x6a\xcb\xea\x8b\xe7\x66\xcb\xd8\xcd\xd6\x65\x5b\x3e\x9c\x58\x77\xe7\x72\x97\xbc\xa1\xa4\xc1\x19\xe5\xbb\x96\xa2\x9d\xe0\xad\x4a\x94\x64\xf1\xd2\x1a\xd1\x43\xeb\xb1\x55\x1e\x86\x21\xf2\x60\xbb\x10\xb7\x6a\xab\x15\xab\x16\x82\x69\x9a\xec\x50\x4e\xfe\x0b\x88\x7b\xe2\xc5\xcc\x2b\xef\xc0\x6b\xdd\xce\x68\xd7\x92\x48\x12\xd0\x54\x8d\xa0\xbf\x4d\x79\x6d\xcc\x34\xf7\xec\xa3\xcd\x76\xd5\xd5\x9b\x73\xa0\x71\xf3\xf6\xe7\x62\x39\xd3\xf9\xe8\x9c\x48\xdb\x6d\x02\x4c\x35\xb6\x15\x8d\x3c\xf0\x1c\x55\xb0\xe5\xbf\x4b\x30\x08\x6d\x80\xc8\x47\xb4\x5c\xd5\xd4\x60\x30\x07\x18\x0b\x1b\x2b\x60\x6c\x02\x28\xd8\x76\xa7\xe9\xea\xb7\xc4\xb9\xea\x85\x47\xd7\x0c\xda\xf4\x61\xa9\x3b\xce\x30\x70\xba\xcd\xf5\x68\x46\xa5\x16\xb5\x59\x14\x71\x92\x6a\x0c\xde\xe9\x15\xc3\x4e\x21\xb8\xc5\x7e\x21\x45\x82\x52\xaf\x7e\x36\x91\xbb\xe3\xb8\x19\x65\x77\x1a\x66\xbf\xce\xd9\xa4\xf8\x09\x28\x6b\xbf\x22\x72\x9a\xf9\x67\xf5\x7d\x9d\xe9\xe4\xff\xcb\xcc\xb6\x0b\x1f\xab\x6b\x9b\x55\xdd\x65\x61\x5c\x47\x18\x23\xcc\xa4\x88\x61\x4a\x14\x82\x16\x90\x15\x2d\x03\xe1\x01\xcc\xa9\x8f\x30\x47\xa9\x48\x33\xa2\x67\xe5\x82\x97\x66\x76\x87\x2a\xab\xc6\x7a\x00\xf7\x3c\x78\x11\x04\x9e\xc4\x58\xcc\xb1\x42\xca\xde\x56\x3c\x6a\x59\xca\x86\xf9\xf4\x2c\xa0\xc9\x05\xf3\xd2\xc4\x4e\x51\x4d\x6d\xf1\x38\xeb\x04\x32\xa7\xf6\x1d\x0d\x72\x0b\xcb\xf8\xcf\xc8\xd9\xdd\x84\x12\x0c\xcb\x11\x82\xcd\x6b\x73\xe6\xab\x59\xf5\x0c\x3a\x16\x3e\x53\xcd\x89\x48\xb9\x86\x63\x18\x6c\x1e\x5c\xb6\x5a\x5e\x95\x39\x37\xa7\xea\x74\x2b\x52\x90\x20\xe8\x38\x94\xcf\xa9\xb2\x3f\x22\xae\x25\xfc\x37\x0d\x59\x5e\x73\x93\x52\x29\x04\xdf\x70\x52\x19\xdb\x60\x72\xbc\xd9\xf5\x04\x06\x4d\xdd\xfc\x64\x13\x5d\x08\x25\x49\x22\x23\x6c\xbe\x62\x40\x95\x0d\x8b\x55\x02\x8d\x2d\x59\x68\xa7\x75\x8d\x4b\xa5\x14\x7b\xb6\x67\xb2\x99\x5e\x91\x1b\x99\x03\x48\x23\x5b\x81\xf1\xe7\x6e\xa9\xa3\x7b\xd2\x5f\x27\x3c\xf7\xa7\xdd\xd8\x7b\xbb\x49\x67\x87\x89\xce\x06\x54\x9b\xa7\x85\x8d\xdd\xb9\x1e\x5f\x5f\x08\x1c\x7b\xe6\x64\x60\xfe\xdb\xdf\xb3\xff\x77\x00\x00\x00\xff\xff\x4f\xe0\x31\x31\xdf\x3e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 16095, mode: os.FileMode(420), modTime: time.Unix(1601701010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
